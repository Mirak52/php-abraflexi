<?php

namespace Test\FlexiBee;

use FlexiBee\Stitek;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-27 at 17:32:11.
 */
class StitekTest extends FlexiBeeRWTest
{
    /**
     * @var Stitek
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Stitek;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        
    }

    /**
     * @covers FlexiBee\Stitek::getLabels
     */
    public function testGetLabels()
    {
        $this->object->getLabels(new \FlexiBee\Adresar());
    }

    /**
     * @covers FlexiBee\Stitek::listToArray
     */
    public function testListToArray()
    {
        $this->assertEquals(['A' => 'A', 'B' => 'B'], Stitek::listToArray('A,B'));
    }

    /**
     * @covers FlexiBee\Stitek::getAvailbleLabels
     */
    public function testGetAvailbleLabels()
    {
        $labels = \FlexiBee\Stitek::getAvailbleLabels(new \FlexiBee\FakturaVydana());
        $this->assertTrue(is_array($labels) && count($labels));
    }

    /**
     * @covers FlexiBee\Stitek::setLabel
     * @todo   Implement testSetLabel().
     */
    public function testSetLabel()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FlexiBee\Stitek::unsetLabel
     * @todo   Implement testUnsetLabel().
     */
    public function testUnsetLabel()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FlexiBee\Stitek::createNew
     */
    public function testCreateNew()
    {
        $this->assertFalse($this->object->createNew('Without Invoice',
                ['pokladna']));

        $testCode = \Ease\Functions::randomString();

        $this->assertTrue($this->object->createNew('Example Label',
                ['faktura-vydana', 'faktura-prijata'], ['kod' => $testCode]));

        $this->object->deleteFromFlexiBee($this->object->getRecordIdent()); //Cleanup
    }
}
