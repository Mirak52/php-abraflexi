<?php

namespace Test\AbraFlexi;

use AbraFlexi\RO;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-04 at 10:08:36.
 */
class ROTest extends \Test\Ease\SandTest {

    /**
     * @var RO
     */
    protected $object;

    /**
     * Example JSON 
     * @var string json 
     */
    public $json = '{"winstrom":{"@version":"1.0","adresar":[{"id":"2574","kontakty":[{"id":"299"}]}]}}';

    /**
     * Example XML
     * @var string xml 
     */
    public $xml = '<?xml version="1.0" encoding="utf-8"?>

<winstrom version="1.0">
  <!-- Adresář -->
  <adresar>
    <!-- ID (celé číslo) - -->
    <id>2574</id>
    <kontakty>
      <!-- Kontakty -->
      <kontakt>
        <!-- ID (celé číslo) - -->
        <id>299</id>
      </kontakt>
    </kontakty>
  </adresar>
</winstrom>';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers AbraFlexi\AbraFlexiRO::__construct
     */
    protected function setUp(): void {
        $this->object = new RO();
        $this->object->prefix = '/';
        $this->object->debug = true;
        $this->object->reportRecipient = 'testreports@vitexsoftware.cz';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    private function withEvidenceOnly() {
        if (empty($this->object->getEvidence())) {
            $this->markTestSkipped('Evidence is not set');
        }
    }

    /**
     * @covers AbraFlexi\RO::setUp
     * @todo   Implement testsetUp().
     */
    public function testsetUp() {
        $this->assertEquals('', $this->object->setUp());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::logBanner
     */
    public function testLogBanner() {
        \Ease\Logger\Regent::singleton()->cleanMessages();
        $this->object->logBanner(addslashes(get_class($this)));
        $messages = \Ease\Logger\Regent::singleton()->getMessages();
        $this->assertFalse(empty(strstr($messages[0]->body, 'ServerURL http')));
    }

    /**
     * Test Constructor
     *
     * @depends testLogBanner
     * @covers AbraFlexi\AbraFlexiRO::__construct
     */
    public function testConstructor() {
        $classname = get_class($this->object);
        $evidence = $this->object->getEvidence();

        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
                ->disableOriginalConstructor()
                ->getMockForAbstractClass();
        $mock->__construct(1, ['debug' => false]);

        if (!isset(\AbraFlexi\EvidenceList::$name[$evidence])) {
            $evidence = 'adresar';
        }

        $mock->__construct('',
                [
                    'company' => constant('ABRAFLEXI_COMPANY'),
                    'url' => constant('ABRAFLEXI_URL'),
                    'user' => constant('ABRAFLEXI_LOGIN'),
                    'password' => constant('ABRAFLEXI_PASSWORD'),
                    'debug' => true,
                    'prefix' => 'c',
                    'evidence' => $evidence]);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::curlInit
     */
    public function testCurlInit() {
        $this->object->timeout = 120;
        $this->object->curlInit();
        $this->assertTrue(is_resource($this->object->curl));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::processInit
     */
    public function testProcessInit() {

        $this->object->processInit(1);
        $this->object->processInit(['id' => 1]);
        $this->assertEquals(1, $this->object->getDataValue('id'));

        if (!is_null($this->object->evidence) && $this->object->evidence != 'test') {


            $firstID = $this->object->getColumnsFromAbraFlexi(['id', 'kod'],
                    ['limit' => 1]);

            if (count($firstID) && isset($firstID[0]['id'])) {

                $this->object->processInit((int) current($firstID));
                $this->assertNotEmpty($this->object->__toString());

                if (isset($firstID[0]['kod'])) {
                    $this->object->processInit('code:' . $firstID[0]['kod']);
                    $this->assertNotEmpty($this->object->__toString());
                }

                $this->object->processInit($this->object->getEvidenceURL() . '/' . $firstID[0]['id'] . '.xml');
            } else {
                $this->markTestSkipped(sprintf('Evidence %s does not contain first record',
                                $this->object->getEvidence()));
            }
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setUp
     */
    public function testSetUp() {
        $this->object->authSessionId = 'XXXtestXXX';
        $this->object->setUp(
                [
                    'company' => 'cmp',
                    'url' => 'url',
                    'user' => 'usr',
                    'password' => 'pwd',
                    'prefix' => 'c',
                    'debug' => true,
                    'defaultUrlParams' => ['limit' => 10],
                    'evidence' => 'smlouva',
                    'detail' => 'summary',
                    'filter' => 'testfilter',
                    'ignore404' => true,
                    'offline' => true
                ]
        );
        $this->assertEquals('cmp', $this->object->company);
        $this->assertEquals('url', $this->object->url);
        $this->assertEquals('usr', $this->object->user);
        $this->assertEquals('/c/', $this->object->prefix);
        $this->assertEquals('pwd', $this->object->password);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getConnectionOptions
     */
    public function testGetConnectionOptions() {
        $options = $this->object->getConnectionOptions();
        $this->assertArrayHasKey('url', $options);
        $this->object->timeout = 120;
        $this->object->authSessionId = 'sessid';
        $this->object->setCompany('test');
        $this->object->getConnectionOptions();
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setPrefix
     * @expectedException \Exception
     */
    public function testSetPrefix() {
        $this->object->setPrefix('c');
        $this->assertEquals('/c/', $this->object->prefix);
        $this->object->setPrefix(null);
        $this->assertEquals('', $this->object->prefix);
        $this->object->setPrefix('fail');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setFormat
     */
    public function testSetFormat() {
        $this->object->setFormat('xml');
        $this->assertEquals('xml', $this->object->format);
    }

    /**
     * We can set only evidence defined in EvidenceList class
     *
     * @covers AbraFlexi\AbraFlexiRO::setEvidence
     * @expectedException \Exception
     */
    public function testSetEvidence() {
        $this->object->setEvidence('adresar');
        $this->assertEquals('adresar', $this->object->evidence);
        $this->object->setPrefix('c');
        $this->object->debug = true;
        $this->object->setEvidence('fail');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setCompany
     */
    public function testSetCompany() {
        $this->object->setCompany('test_s_r_o_');
        $this->assertEquals('test_s_r_o_', $this->object->company);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::object2array
     */
    public function testObject2array() {
        $this->assertNull($this->object->object2array(new \stdClass()));
        $this->assertEquals(
                [
                    'item' => 1,
                    'arrItem' => ['a', 'b' => 'c']
                ]
                , $this->object->object2array(new \Test\ObjectForTesting()));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::objectToID
     */
    public function testObjectToID() {
        $this->object->setDataValue('kod', 'TEST');
        $this->assertEquals('code:TEST',
                $this->object->objectToID($this->object));

        $this->assertEquals('TEST', $this->object->objectToID('TEST'));
    }

    /**
     * @covers AbraFlexi\RO::setObjectName
     * @todo   Implement testsetObjectName().
     */
    public function testsetObjectName() {
        $this->assertEquals('', $this->object->setObjectName());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::companyUrlToOptions
     * @todo   Implement testcompanyUrlToOptions().
     */
    public function testcompanyUrlToOptions() {
        $this->assertEquals('', $this->object->companyUrlToOptions());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getConnectionOptions
     * @todo   Implement testgetConnectionOptions().
     */
    public function testgetConnectionOptions() {
        $this->assertEquals('', $this->object->getConnectionOptions());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::configToEnv
     * @todo   Implement testconfigToEnv().
     */
    public function testconfigToEnv() {
        $this->assertEquals('', $this->object->configToEnv());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::curlInit
     * @todo   Implement testcurlInit().
     */
    public function testcurlInit() {
        $this->assertEquals('', $this->object->curlInit());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::processInit
     * @todo   Implement testprocessInit().
     */
    public function testprocessInit() {
        $this->assertEquals('', $this->object->processInit());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setDataValue
     * @todo   Implement testsetDataValue().
     */
    public function testsetDataValue() {
        $this->assertEquals('', $this->object->setDataValue());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::stripBody
     * @todo   Implement teststripBody().
     */
    public function teststripBody() {
        $this->assertEquals('', $this->object->stripBody());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::dateToFlexiDate
     * @todo   Implement testdateToFlexiDate().
     */
    public function testdateToFlexiDate() {
        $this->assertEquals('', $this->object->dateToFlexiDate());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::dateToFlexiDateTime
     * @todo   Implement testdateToFlexiDateTime().
     */
    public function testdateToFlexiDateTime() {
        $this->assertEquals('', $this->object->dateToFlexiDateTime());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setPrefix
     * @todo   Implement testsetPrefix().
     */
    public function testsetPrefix() {
        $this->assertEquals('', $this->object->setPrefix());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setFormat
     * @todo   Implement testsetFormat().
     */
    public function testsetFormat() {
        $this->assertEquals('', $this->object->setFormat());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setEvidence
     * @todo   Implement testsetEvidence().
     */
    public function testsetEvidence() {
        $this->assertEquals('', $this->object->setEvidence());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getEvidence
     * @todo   Implement testgetEvidence().
     */
    public function testgetEvidence() {
        $this->assertEquals('', $this->object->getEvidence());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setCompany
     * @todo   Implement testsetCompany().
     */
    public function testsetCompany() {
        $this->assertEquals('', $this->object->setCompany());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getCompany
     * @todo   Implement testgetCompany().
     */
    public function testgetCompany() {
        $this->assertEquals('', $this->object->getCompany());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getResponseEvidence
     * @todo   Implement testgetResponseEvidence().
     */
    public function testgetResponseEvidence() {
        $this->assertEquals('', $this->object->getResponseEvidence());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::object2array
     * @todo   Implement testobject2array().
     */
    public function testobject2array() {
        $this->assertEquals('', $this->object->object2array());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::objectToID
     * @todo   Implement testobjectToID().
     */
    public function testobjectToID() {
        $this->assertEquals('', $this->object->objectToID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getEvidenceURL
     * @todo   Implement testgetEvidenceURL().
     */
    public function testgetEvidenceURL() {
        $this->assertEquals('', $this->object->getEvidenceURL());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::evidenceUrlWithSuffix
     * @todo   Implement testevidenceUrlWithSuffix().
     */
    public function testevidenceUrlWithSuffix() {
        $this->assertEquals('', $this->object->evidenceUrlWithSuffix());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::updateApiURL
     * @todo   Implement testupdateApiURL().
     */
    public function testupdateApiURL() {
        $this->assertEquals('', $this->object->updateApiURL());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::addDefaultUrlParams
     * @todo   Implement testaddDefaultUrlParams().
     */
    public function testaddDefaultUrlParams() {
        $this->assertEquals('', $this->object->addDefaultUrlParams());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::performRequest
     * @todo   Implement testperformRequest().
     */
    public function testperformRequest() {
        $this->assertEquals('', $this->object->performRequest());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::rawResponseToArray
     * @todo   Implement testrawResponseToArray().
     */
    public function testrawResponseToArray() {
        $this->assertEquals('', $this->object->rawResponseToArray());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::fixResponseTypes
     * @todo   Implement testfixResponseTypes().
     */
    public function testfixResponseTypes() {
        $this->assertEquals('', $this->object->fixResponseTypes());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::fixRecordTypes
     * @todo   Implement testfixRecordTypes().
     */
    public function testfixRecordTypes() {
        $this->assertEquals('', $this->object->fixRecordTypes());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::rawJsonToArray
     * @todo   Implement testrawJsonToArray().
     */
    public function testrawJsonToArray() {
        $this->assertEquals('', $this->object->rawJsonToArray());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::rawXmlToArray
     * @todo   Implement testrawXmlToArray().
     */
    public function testrawXmlToArray() {
        $this->assertEquals('', $this->object->rawXmlToArray());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::parseResponse
     * @todo   Implement testparseResponse().
     */
    public function testparseResponse() {
        $this->assertEquals('', $this->object->parseResponse());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::parseError
     * @todo   Implement testparseError().
     */
    public function testparseError() {
        $this->assertEquals('', $this->object->parseError());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::doCurlRequest
     * @todo   Implement testdoCurlRequest().
     */
    public function testdoCurlRequest() {
        $this->assertEquals('', $this->object->doCurlRequest());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::contentTypeToResponseFormat
     * @todo   Implement testcontentTypeToResponseFormat().
     */
    public function testcontentTypeToResponseFormat() {
        $this->assertEquals('', $this->object->contentTypeToResponseFormat());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setAction
     * @todo   Implement testsetAction().
     */
    public function testsetAction() {
        $this->assertEquals('', $this->object->setAction());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::xml2array
     * @todo   Implement testxml2array().
     */
    public function testxml2array() {
        $this->assertEquals('', $this->object->xml2array());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::disconnect
     * @todo   Implement testdisconnect().
     */
    public function testdisconnect() {
        $this->assertEquals('', $this->object->disconnect());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::__destruct
     * @todo   Implement test__destruct().
     */
    public function test__destruct() {
        $this->assertEquals('', $this->object->__destruct());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getFlexiRow
     * @todo   Implement testgetFlexiRow().
     */
    public function testgetFlexiRow() {
        $this->assertEquals('', $this->object->getFlexiRow());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::extractUrlParams
     * @todo   Implement testextractUrlParams().
     */
    public function testextractUrlParams() {
        $this->assertEquals('', $this->object->extractUrlParams());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::urlEncode
     * @todo   Implement testurlEncode().
     */
    public function testurlEncode() {
        $this->assertEquals('', $this->object->urlEncode());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getFlexiData
     * @todo   Implement testgetFlexiData().
     */
    public function testgetFlexiData() {
        $this->assertEquals('', $this->object->getFlexiData());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::loadFromAbraFlexi
     * @todo   Implement testloadFromAbraFlexi().
     */
    public function testloadFromAbraFlexi() {
        $this->assertEquals('', $this->object->loadFromAbraFlexi());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::reload
     * @todo   Implement testreload().
     */
    public function testreload() {
        $this->assertEquals('', $this->object->reload());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setFilter
     * @todo   Implement testsetFilter().
     */
    public function testsetFilter() {
        $this->assertEquals('', $this->object->setFilter());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getJsonizedData
     * @todo   Implement testgetJsonizedData().
     */
    public function testgetJsonizedData() {
        $this->assertEquals('', $this->object->getJsonizedData());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getDataForJSON
     * @todo   Implement testgetDataForJSON().
     */
    public function testgetDataForJSON() {
        $this->assertEquals('', $this->object->getDataForJSON());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::join
     * @todo   Implement testjoin().
     */
    public function testjoin() {
        $this->assertEquals('', $this->object->join());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::urlizeId
     * @todo   Implement testurlizeId().
     */
    public function testurlizeId() {
        $this->assertEquals('', $this->object->urlizeId());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::idExists
     * @todo   Implement testidExists().
     */
    public function testidExists() {
        $this->assertEquals('', $this->object->idExists());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::recordExists
     * @todo   Implement testrecordExists().
     */
    public function testrecordExists() {
        $this->assertEquals('', $this->object->recordExists());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getAllFromAbraFlexi
     * @todo   Implement testgetAllFromAbraFlexi().
     */
    public function testgetAllFromAbraFlexi() {
        $this->assertEquals('', $this->object->getAllFromAbraFlexi());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getColumnsFromAbraFlexi
     * @todo   Implement testgetColumnsFromAbraFlexi().
     */
    public function testgetColumnsFromAbraFlexi() {
        $this->assertEquals('', $this->object->getColumnsFromAbraFlexi());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getKod
     * @todo   Implement testgetKod().
     */
    public function testgetKod() {
        $this->assertEquals('', $this->object->getKod());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::saveDebugFiles
     * @todo   Implement testsaveDebugFiles().
     */
    public function testsaveDebugFiles() {
        $this->assertEquals('', $this->object->saveDebugFiles());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setPostFields
     * @todo   Implement testsetPostFields().
     */
    public function testsetPostFields() {
        $this->assertEquals('', $this->object->setPostFields());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getPostFields
     * @todo   Implement testgetPostFields().
     */
    public function testgetPostFields() {
        $this->assertEquals('', $this->object->getPostFields());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::flexiUrl
     * @todo   Implement testflexiUrl().
     */
    public function testflexiUrl() {
        $this->assertEquals('', $this->object->flexiUrl());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getRecordID
     * @todo   Implement testgetRecordID().
     */
    public function testgetRecordID() {
        $this->assertEquals('', $this->object->getRecordID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getRecordCode
     * @todo   Implement testgetRecordCode().
     */
    public function testgetRecordCode() {
        $this->assertEquals('', $this->object->getRecordCode());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getRecordIdent
     * @todo   Implement testgetRecordIdent().
     */
    public function testgetRecordIdent() {
        $this->assertEquals('', $this->object->getRecordIdent());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString() {
        $this->assertEquals('', $this->object->__toString());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }


    /**
     * @covers AbraFlexi\RO::getPrevRecordID
     * @todo   Implement testgetPrevRecordID().
     */
    public function testgetPrevRecordID() {
        $this->assertEquals('', $this->object->getPrevRecordID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getExternalIDs
     * @todo   Implement testgetExternalIDs().
     */
    public function testgetExternalIDs() {
        $this->assertEquals('', $this->object->getExternalIDs());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getApiURL
     * @todo   Implement testgetApiURL().
     */
    public function testgetApiURL() {
        $this->assertEquals('', $this->object->getApiURL());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getResponseFormat
     * @todo   Implement testgetResponseFormat().
     */
    public function testgetResponseFormat() {
        $this->assertEquals('', $this->object->getResponseFormat());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getOfflineColumnsInfo
     * @todo   Implement testgetOfflineColumnsInfo().
     */
    public function testgetOfflineColumnsInfo() {
        $this->assertEquals('', $this->object->getOfflineColumnsInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getOnlineColumnsInfo
     * @todo   Implement testgetOnlineColumnsInfo().
     */
    public function testgetOnlineColumnsInfo() {
        $this->assertEquals('', $this->object->getOnlineColumnsInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::updateColumnsInfo
     * @todo   Implement testupdateColumnsInfo().
     */
    public function testupdateColumnsInfo() {
        $this->assertEquals('', $this->object->updateColumnsInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getColumnInfo
     * @todo   Implement testgetColumnInfo().
     */
    public function testgetColumnInfo() {
        $this->assertEquals('', $this->object->getColumnInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getEvidenceInfo
     * @todo   Implement testgetEvidenceInfo().
     */
    public function testgetEvidenceInfo() {
        $this->assertEquals('', $this->object->getEvidenceInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getEvidenceName
     * @todo   Implement testgetEvidenceName().
     */
    public function testgetEvidenceName() {
        $this->assertEquals('', $this->object->getEvidenceName());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::saveResponseToFile
     * @todo   Implement testsaveResponseToFile().
     */
    public function testsaveResponseToFile() {
        $this->assertEquals('', $this->object->saveResponseToFile());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getVazby
     * @todo   Implement testgetVazby().
     */
    public function testgetVazby() {
        $this->assertEquals('', $this->object->getVazby());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getAbraFlexiURL
     * @todo   Implement testgetAbraFlexiURL().
     */
    public function testgetAbraFlexiURL() {
        $this->assertEquals('', $this->object->getAbraFlexiURL());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setMyKey
     * @todo   Implement testsetMyKey().
     */
    public function testsetMyKey() {
        $this->assertEquals('', $this->object->setMyKey());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::ignore404
     * @todo   Implement testignore404().
     */
    public function testignore404() {
        $this->assertEquals('', $this->object->ignore404());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::sendByMail
     * @todo   Implement testsendByMail().
     */
    public function testsendByMail() {
        $this->assertEquals('', $this->object->sendByMail());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::flexiDateToDateTime
     * @todo   Implement testflexiDateToDateTime().
     */
    public function testflexiDateToDateTime() {
        $this->assertEquals('', $this->object->flexiDateToDateTime());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::flexiDateTimeToDateTime
     * @todo   Implement testflexiDateTimeToDateTime().
     */
    public function testflexiDateTimeToDateTime() {
        $this->assertEquals('', $this->object->flexiDateTimeToDateTime());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getInFormat
     * @todo   Implement testgetInFormat().
     */
    public function testgetInFormat() {
        $this->assertEquals('', $this->object->getInFormat());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::downloadInFormat
     * @todo   Implement testdownloadInFormat().
     */
    public function testdownloadInFormat() {
        $this->assertEquals('', $this->object->downloadInFormat());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::takeData
     * @todo   Implement testtakeData().
     */
    public function testtakeData() {
        $this->assertEquals('', $this->object->takeData());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getReportsInfo
     * @todo   Implement testgetReportsInfo().
     */
    public function testgetReportsInfo() {
        $this->assertEquals('', $this->object->getReportsInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::requestAuthSessionID
     * @todo   Implement testrequestAuthSessionID().
     */
    public function testrequestAuthSessionID() {
        $this->assertEquals('', $this->object->requestAuthSessionID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::login
     * @todo   Implement testlogin().
     */
    public function testlogin() {
        $this->assertEquals('', $this->object->login());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::logout
     * @todo   Implement testlogout().
     */
    public function testlogout() {
        $this->assertEquals('', $this->object->logout());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::error500Reporter
     * @todo   Implement testerror500Reporter().
     */
    public function testerror500Reporter() {
        $this->assertEquals('', $this->object->error500Reporter());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::code
     * @todo   Implement testcode().
     */
    public function testcode() {
        $this->assertEquals('', $this->object->code());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::uncode
     * @todo   Implement testuncode().
     */
    public function testuncode() {
        $this->assertEquals('', $this->object->uncode());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::arrayCleanUP
     * @todo   Implement testarrayCleanUP().
     */
    public function testarrayCleanUP() {
        $this->assertEquals('', $this->object->arrayCleanUP());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::logBanner
     * @todo   Implement testlogBanner().
     */
    public function testlogBanner() {
        $this->assertEquals('', $this->object->logBanner());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getLastOperationType
     * @todo   Implement testgetLastOperationType().
     */
    public function testgetLastOperationType() {
        $this->assertEquals('', $this->object->getLastOperationType());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getErrors
     * @todo   Implement testgetErrors().
     */
    public function testgetErrors() {
        $this->assertEquals('', $this->object->getErrors());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::__wakeup
     * @todo   Implement test__wakeup().
     */
    public function test__wakeup() {
        $this->assertEquals('', $this->object->__wakeup());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getMyKey
     * @todo   Implement testgetMyKey().
     */
    public function testgetMyKey() {
        $this->assertEquals('', $this->object->getMyKey());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::getKeyColumn
     * @todo   Implement testgetKeyColumn().
     */
    public function testgetKeyColumn() {
        $this->assertEquals('', $this->object->getKeyColumn());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\RO::setKeyColumn
     * @todo   Implement testsetKeyColumn().
     */
    public function testsetKeyColumn() {
        $this->assertEquals('', $this->object->setKeyColumn());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::performRequest
     */
    public function testPerformRequest() {
        $evidence = $this->object->getEvidence();
        switch ($evidence) {
            case null:
            case '':
            case 'c':
            case 'test':
            case 'status':
            case 'nastaveni':
                $this->object->performRequest(null, 'GET', 'xml');
                break;

            default:
                $this->object->performRequest(null, 'GET', 'json');
                $this->object->performRequest(null, 'GET', 'xml');
                break;
        }

        //404 Test

        $notFound = $this->object->performRequest('error404.json');
        if (array_key_exists('message', $notFound)) {
            $this->assertEquals('false', $notFound['success']);
        } else {
            echo '';
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::rawResponseToArray
     */
    public function testRawResponseToArray() {

        $this->assertTrue(is_array(
                        $this->object->rawResponseToArray($this->json, 'json')));
        $this->assertTrue(is_array(
                        $this->object->rawResponseToArray($this->xml, 'xml')));
        $this->assertTrue(is_array(
                        $this->object->rawResponseToArray('simpletext', 'txt')));
        $this->assertTrue(is_array(
                        $this->object->rawResponseToArray('othertext', 'other')));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::rawJsonToArray
     */
    public function testRawJsonToArray() {
        $this->assertNull($this->object->rawJsonToArray($this->json . 'XXX'));
        $evidence = $this->object->getResponseEvidence() ? $this->object->getResponseEvidence() : 'adresar';
        $arrayWeWant = [
            '@version' => '1.0',
            $evidence =>
            [
                [
                    'id' => '2574',
                    'kontakty' =>
                    [
                        ['id' => '299']
                    ]
                ]
            ]
        ];
        $this->assertEquals($arrayWeWant,
                $this->object->rawJsonToArray($this->json));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::rawXmlToArray
     */
    public function testRawXmlToArray() {
        $evidence = $this->object->getResponseEvidence() ? $this->object->getResponseEvidence() : 'adresar';
        $arrayWeWant = [
            '@version' => '1.0',
            $evidence =>
            [
                [
                    'id' => '2574',
                    'kontakty' =>
                    [
                        ['kontakt' => [
                                ['id' => '299']
                            ]
                        ]
                    ]
                ]
            ]
        ];
        $this->assertEquals($arrayWeWant,
                $this->object->rawXmlToArray($this->xml));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::parseResponse
     */
    public function testParseResponse() {
        $this->object->parseResponse($this->object->rawJsonToArray($this->json),
                200);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::doCurlRequest
     */
    public function testDoCurlRequest() {
        $this->object->doCurlRequest(constant('ABRAFLEXI_URL'), 'GET');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setAction
     */
    public function testSetAction() {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->object->setAction('none');
                break;
            default:
                $this->assertTrue($this->object->setAction('new'));
                $this->object->actionsAvailable = [];
                $this->assertFalse($this->object->setAction('none'));
                $this->object->actionsAvailable = ['copy'];
                $this->assertFalse($this->object->setAction('none'));
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getEvidence
     */
    public function testGetEvidence() {
        $this->assertEquals($this->object->evidence,
                $this->object->getEvidence());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getCompany
     */
    public function testGetCompany() {
        $this->assertEquals($this->object->company, $this->object->getCompany());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getResponseEvidence
     */
    public function testGetResponseEvidence() {
        $responseEvidence = $this->object->getResponseEvidence();
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;
            default:
                $this->assertEquals($this->object->getEvidence(),
                        $responseEvidence);
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getLastInsertedId
     * @depends testInsertToAbraFlexi
     */
    public function testGetLastInsertedId() {
        $this->assertNotEmpty($this->object->getLastInsertedId());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::xml2array
     */
    public function testXml2array() {
        $arrayWeWant = [
            '@version' => '1.0',
            'adresar' =>
            [
                [
                    'id' => '2574',
                    'kontakty' =>
                    [
                        ['kontakt' => [
                                ['id' => '299']
                            ]
                        ]
                    ]
                ]
            ]
        ];

        $this->assertEquals($arrayWeWant, $this->object->xml2array($this->xml));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::extractUrlParams
     */
    public function testExtractUrlParams() {
        $conditions = ['id' => 23, 'limit' => 10];
        $this->object->extractUrlParams($conditions, $urlParams);
        $this->assertEquals(['id' => 23], $conditions);
        $this->assertEquals(['limit' => 10], $urlParams);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::urlEncode
     */
    public function testUrlEncode() {
        $this->assertEquals("stitky%3D'code:VIP'%20or%20stitky%3D'code:DULEZITE'",
                RO::urlEncode("stitky='code:VIP' or stitky='code:DULEZITE'"));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getAllFromAbraFlexi
     */
    public function testGetAllFromAbraFlexi() {
        $this->object->getAllFromAbraFlexi();
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::disconnect
     *
     * @depends testPerformRequest
     * @depends testLoadFlexiData
     * @depends testGetFlexiRow
     * @depends testGetFlexiData
     * @depends testLoadFromAbraFlexi
     * @depends testInsertToAbraFlexi
     * @depends testIdExists
     * @depends testRecordExists
     * @depends testGetColumnsFromAbraFlexi
     * @depends testSearchString
     */
    public function testDisconnect() {
        $this->object->disconnect();
        $this->assertNull($this->object->curl);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::__destruct
     * @depends testDisconnect
     */
    public function testdestruct() {
        $this->markTestSkipped();
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getFlexiRow
     */
    public function testGetFlexiRow() {
        $this->object->getFlexiRow(0);
        $this->object->getFlexiRow(1);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getFlexiData
     */
    public function testGetFlexiData() {
        $evidence = $this->object->getEvidence();
        switch ($evidence) {
            case null:
                $this->object->getFlexiData();
                break;
            case 'c':
                $this->object->evidence = 'c';
                $this->object->prefix = '';
                $this->object->company = '';
                $this->object->nameSpace = 'companies';
                $flexidata = $this->object->getFlexiData();
                $this->assertArrayHasKey('company', $flexidata);
                break;
            case 'evidence-list':
                $flexidata = $this->object->getFlexiData('',
                        ['detail' => 'id']);
                $this->assertArrayHasKey('evidenceType', $flexidata[0]);
                break;

            default:
                $flexidata = $this->object->getFlexiData('',
                        ['detail' => 'id']);

                if (is_array($flexidata)) {
                    if (count($flexidata)) {
                        $this->markTestSkipped('Empty evidence');
                    } else {
                        $this->assertArrayHasKey(0, $flexidata);

                        $this->assertArrayHasKey('id', $flexidata[0]);
                        $filtrered = $this->object->getFlexiData('',
                                ["id = " . $flexidata[0]['id'], 'detail' => 'full']);
                        $this->assertArrayHasKey(0, $filtrered);
                        $this->assertArrayHasKey('id', $filtrered[0]);
                    }
                }
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::loadFromAbraFlexi
     */
    public function testLoadFromAbraFlexi() {
        $this->object->loadFromAbraFlexi();
        $this->object->loadFromAbraFlexi(222);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getJsonizedData
     */
    public function testGetJsonizedData() {
        $this->assertEquals('{"' . $this->object->nameSpace . '":{"@version":"1.0","' . $this->object->evidence . '":{"key":"value"}}}',
                $this->object->getJsonizedData(['key' => 'value']));

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->object->getJsonizedData(['key' => 'value']);
                break;
            default:
                $this->object->setAction('copy');
                $this->assertEquals('{"' . $this->object->nameSpace . '":{"@version":"1.0","' . $this->object->evidence . '":{"key":"value"},"' . $this->object->evidence . '@action":"copy"}}',
                        $this->object->getJsonizedData(['key' => 'value']));

                $this->object->action = 'storno';
                $this->object->filter = "stavUhrK = 'stavUhr.uhrazeno'";
                $this->object->getJsonizedData([]);
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getDataForJSON
     */
    public function testGetDataForJson() {
        $this->object->getDataForJSON();
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::idExists
     */
    public function testIdExists() {
        $this->assertFalse($this->object->idExists('nonexistent'));
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;
            default:
                $first = $this->object->getColumnsFromAbraFlexi(['id'],
                        ['limit' => 1], 'id');
                if (empty($first)) {
                    $this->markTestSkipped('empty evidence ?');
                } else {
                    $this->object->setData($first);
                    $this->assertTrue($this->object->idExists());
                }
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getRecordID
     */
    public function testGetRecordID() {
        $this->object->setData([$this->object->getKeyColumn() => 10]);
        $this->assertEquals(10, $this->object->getRecordID());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getRecordIdent
     */
    public function testGetRecordIdent() {
        $this->object->dataReset();
        $this->assertNull($this->object->getRecordIdent());

        $this->object->setMyKey(20);
        $this->assertEquals(20, $this->object->getRecordIdent());

        $this->object->setDataValue('kod', 'test');
        $this->assertEquals('code:TEST', $this->object->getRecordIdent());

        $this->object->setDataValue('external-ids', ['ext:test:10']);
        $this->assertEquals('ext:test:10', $this->object->getRecordIdent());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::recordExists
     */
    public function testRecordExists() {
        $evidence = $this->object->getEvidence();

        switch ($evidence) {
            case null:
            case 'c':
            case 'status':
            case 'evidence-list':
                $this->object->recordExists();
                break;

            default:
                $flexidata = $this->object->getFlexiData('',
                        ['limit' => 1, 'detail' => 'id']);
                if (is_array($flexidata) && !count($flexidata)) {
                    $this->assertFalse($this->object->recordExists(['id' => 1]),
                            'Record ID 1 exists in empty evidence ?');
                } else {
                    if (!is_null($flexidata)) {
                        $this->object->setData(['id' => (int) $flexidata[0]['id']]);
                        $this->assertTrue($this->object->recordExists(),
                                'First record exists test failed');
                        $this->assertFalse($this->object->recordExists(['id' => 0]),
                                'Record ID 0 exists');
                        $this->assertFalse($this->object->recordExists(['unexistent' => 1]),
                                'Unexistent Record exist ?');
                    }
                }
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getColumnsFromAbraFlexi
     */
    public function testGetColumnsFromAbraFlexi() {

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;
            default:
                $this->object->getColumnsFromAbraFlexi(['id', 'kod'],
                        ['limit' => 1], 'id');
                $this->object->getColumnsFromAbraFlexi('summary', ['limit' => 1],
                        'id');

                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getExternalID
     */
    public function testGetExternalID() {
        $this->assertTrue(empty($this->object->getExternalID('ext:test:10'))); //ext: does not exist

        $this->object->setDataValue('external-ids',
                ['ext:doe:22', 'ext:test:10']);

        $this->assertEquals('ext:doe:22', $this->object->getExternalID());
        $this->assertEquals('10', $this->object->getExternalID('test'));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getGlobalVersion
     */
    public function testGetGlobalVersion() {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->object->getGlobalVersion();
                break;
            default:
                $this->assertTrue(is_int($this->object->getGlobalVersion()),
                        'error obtaining of GlobalVersion');
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getApiURL
     */
    public function testGetApiUrl() {
        $evidence = $this->object->getEvidence();
        if ($evidence) {
            $url = $this->object->url . '/c/' . constant('ABRAFLEXI_COMPANY') . '/' . $evidence;
        } else {
            $url = $this->object->url . '/c/' . constant('ABRAFLEXI_COMPANY');
        }

        $this->assertEquals($url, $this->object->getApiURL());
        $this->assertEquals($url . '.html', $this->object->getApiURL('html'));
        $this->assertEquals($url . '.xml', $this->object->getApiURL('xml'));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getResponseFormat
     */
    public function testGetResponseFormat() {
        $this->object->performRequest(null, 'GET', 'json');
        $this->assertEquals('json', $this->object->getResponseFormat());
        $this->object->performRequest(null, 'GET', 'xml');
        $this->assertEquals('xml', $this->object->getResponseFormat());
        unset($this->object->curlInfo['content_type']);
        $this->assertNull($this->object->getResponseFormat());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getKod
     */
    public function testGetKod() {
        $testString = [];
        $this->assertEquals('code:CODE',
                $this->object->getKod([$this->object->keyColumn => 'code']));

        $testString[$this->object->nameColumn] = 'Fish clamp -  Úchytka pro instalaci samonosných kabelů '
                . '(3.5 mm)';
        $code0 = $this->object->getKod($testString);
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR', $code0);
        $code1 = $this->object->getKod($testString,
                false);
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR', $code1);
        $code2 = $this->object->getKod($testString);
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR1', $code2);
        $this->object->setData($testString);
        $code3 = $this->object->getKod();
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR2', $code3);

        $this->assertEquals('code:TEST',
                $this->object->getKod([$this->object->nameColumn => 'test']));

        $this->assertEquals('code:TEST1', $this->object->getKod('test'));

        $this->assertEquals('code:TEST2',
                $this->object->getKod(['kod' => 'test']));
        $this->assertEquals('code:NOTSET', $this->object->getKod(['kod' => '']));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::flexiUrl
     */
    public function testFlexiUrl() {
        $this->assertEquals("a eq '1' and b eq 'foo'",
                $this->object->flexiUrl(['a' => 1, 'b' => 'foo'], 'and'));
        $this->assertEquals("a eq '1' or b eq 'bar'",
                $this->object->flexiUrl(['a' => 1, 'b' => 'bar'], 'or'));
        $this->assertEquals("a eq true or b eq false",
                $this->object->flexiUrl(['a' => true, 'b' => false], 'or'));
        $this->assertEquals("a is null and b is not null",
                $this->object->flexiUrl(['a' => null, 'b' => '!null'], 'and'));

        $begin = new \DateTime('2018-08-01');
        $end = new \DateTime('2018-08-31');
        $end = $end->modify('+1 day');

        $interval = new \DateInterval('P1D');
        $daterange = new \DatePeriod($begin, $interval, $end);

        $this->assertEquals("a eq '2018-10-25' and b between '2018-08-01' '2018-09-01'",
                $this->object->flexiUrl(['a' => new \DateTime('25-10-2018'), 'b' => $daterange]));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::unifyResponseFormat
     */
    public function testunifyResponseFormat() {
        $this->assertNull($this->object->unifyResponseFormat(null));
        //One Row Test

        $responseEvidence = $this->object->getResponseEvidence();
        if (empty($responseEvidence)) {
            $responseEvidence = $this->object->evidence = 'test';
        }

        $test1raw = [$responseEvidence =>
            ['id' => 1, 'name' => 'value']
        ];

        $test1expected = [$responseEvidence =>
            [
                ['id' => 1, 'name' => 'value']
            ]
        ];

        $this->assertEquals($test1expected,
                $this->object->unifyResponseFormat($test1raw));

        //Two Row Test
        $test2Raw = [$this->object->getResponseEvidence() =>
            [
                ['id' => 1, 'name' => 'value'],
                ['id' => 2, 'name' => 'value2']
            ]
        ];

        $test2expected = [$this->object->getResponseEvidence() =>
            [
                ['id' => 1, 'name' => 'value'],
                ['id' => 2, 'name' => 'value2']
            ]
        ];

        $this->assertEquals($test2expected,
                $this->object->unifyResponseFormat($test2Raw));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::__toString
     */
    public function testtoString() {
        $id = '123';
        $this->object->setMyKey($id);
        $this->assertEquals($id, (string) $this->object);

        $this->object->setDataValue('kod', 'test');
        $this->assertEquals('code:TEST', (string) $this->object);

        $identifer = 'ext:test:123';
        $this->object->setMyKey($identifer);
        $this->assertEquals($identifer, (string) $this->object);

        $this->object->dataReset();
        $this->assertEquals('', $this->object->__toString());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::draw
     */
    public function testDraw($whatWant = NULL) {
        $this->object->setDataValue('kod', 'test');
        $this->assertEquals('code:TEST', $this->object->draw());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getColumnsInfo
     */
    public function testgetColumnsInfo() {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'evidence-list':
                $this->assertNull($this->object->getColumnsInfo());
                break;
            default:
                $this->assertNotEmpty($this->object->getColumnsInfo(),
                        'Cannot obtain structure for ' . $this->object->getEvidence());
                break;
        }
    }

    /**
     * @covers AbraFlexi\RO::getNextRecordID
     * @todo   Implement testgetNextRecordID().
     */
    public function testgetNextRecordID() {
        $this->assertEquals('', $this->object->getNextRecordID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getActionsInfo
     */
    public function testgetActionsInfo() {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->assertNull($this->object->getActionsInfo());
                $this->assertNotEmpty($this->object->getActionsInfo('faktura-vydana'),
                        'Cannot obtain actions for na evidence');
                break;
            default:
                $this->assertNotEmpty($this->object->getActionsInfo(),
                        'Cannot obtain actions for ' . $this->object->getEvidence());
                break;
        }
    }

    /**
     * @covers AbraFlexi\RO::getExternalID
     * @todo   Implement testgetExternalID().
     */
    public function testgetExternalID() {
        $this->assertEquals('', $this->object->getExternalID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getRelationsInfo
     */
    public function testgetRelationsInfo() {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'strom-cenik':
            case 'ucetni-obdobi':
            case 'evidence-list':
                $this->assertNull($this->object->getRelationsInfo());
                break;
            default:
                $this->assertNotEmpty($this->object->getRelationsInfo(),
                        'Cannot obtain relations for ' . $this->object->getEvidence());
                break;
        }
    }

    /**
     * @covers AbraFlexi\RO::getGlobalVersion
     * @todo   Implement testgetGlobalVersion().
     */
    public function testgetGlobalVersion() {
        $this->assertEquals('', $this->object->getGlobalVersion());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getEvidenceUrl
     */
    public function testgetEvidenceUrl() {
        $this->assertNotEmpty($this->object->getEvidenceUrl());
        $this->assertNotEmpty($this->object->getEvidenceUrl('/properties'));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::evidenceToClassName
     */
    public function testevidenceToClassName() {
        $this->assertEquals('FakturaVydana',
                $this->object->evidenceToClassName('faktura-vydana'));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getEvidenceInfo
     */
    public function testGetEvidenceInfo() {
        $eInfo = $this->object->getEvidenceInfo();
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;
            default:
                $this->assertArrayHasKey('evidencePath', $eInfo);
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getEvidenceName
     */
    public function testGetEvidenceName() {
        $evidenceName = $this->object->getEvidenceName();
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;
            default:
                $this->assertNotEmpty($evidenceName);
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::saveResponseToFile
     */
    public function testSaveResponseToFile() {
        $tmp = sys_get_temp_dir() . '/' . tmpfile();
        $this->object->saveResponseToFile($tmp);
        $this->assertFileExists($tmp);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getFirstRecordID()
     */
    public function testgetFirstRecordID() {
        $this->object->getFirstRecordID();
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;
            default:
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getVazby
     * @expectedException \Exception
     */
    public function testGetVazby() {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;
            default:
                $this->object->getVazby($this->object->getMyKey());
                break;
        }
        $this->object->getVazby();
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::evidenceUrlWithSuffix
     */
    public function testEvidenceUrlWithSuffix() {
        $urlraw = $this->object->getEvidenceURL();
        $lala = $this->object->evidenceUrlWithSuffix('lala');
        $this->assertEquals($urlraw . '/lala', $lala);
        $lolo = $this->object->evidenceUrlWithSuffix('?lele');
        $this->assertEquals($urlraw . '?lele', $lolo);
        $lulu = $this->object->evidenceUrlWithSuffix(';lulu');
        $this->assertEquals($urlraw . ';lulu', $lulu);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::join
     * @expectedException \Ease\Exception
     */
    public function testJoin() {
        $ada = new RO(['id' => 'A'], ['evidence' => 'adresar']);
        $adb = new RO(['id' => 'B'], ['evidence' => 'adresar']);
        $this->assertTrue($this->object->join($ada));
        $this->assertTrue($this->object->join($adb));
        $ads = new \stdClass();
        $this->object->join($ads);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::addDefaultUrlParams
     */
    public function testAddDefaultUrlParams() {
        $this->object->defaultUrlParams = [];
        $this->assertEquals('http://vitexsoftware.cz?a=b',
                $this->object->addDefaultUrlParams('http://vitexsoftware.cz?a=b'));
        $this->object->defaultUrlParams['id'] = 1;
        $this->assertEquals('http://vitexsoftware.cz/path?id=1&a=b',
                $this->object->addDefaultUrlParams('http://vitexsoftware.cz/path?a=b'));
    }

    public function testFlexiDateToDateTime() {
        $this->assertEquals(1495749600,
                RO::flexiDateToDateTime('2017-05-26+02:00')->getTimestamp());
    }

    public function testFlexiDateTimeToDateTime() {
        $this->assertEquals(1506412853,
                RO::flexiDateTimeToDateTime('2017-09-26T10:00:53.755+02:00')->getTimestamp());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::takeData
     */
    public function testTakeData() {
        $this->object->takeData(['id' => 1]);
        $this->assertEquals(constant('ABRAFLEXI_URL') . '/' . constant('ABRAFLEXI_COMPANY') . '/1',
                $this->object->getApiURL());

        $this->object->dataReset();
        $this->object->takeData(['kod' => 'test']);
        $this->assertEquals(constant('ABRAFLEXI_URL') . '/' . constant('ABRAFLEXI_COMPANY') . '/code:TEST',
                $this->object->getApiURL());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setDataValue
     */
    public function testSetDataValue() {
        if (!empty($this->object->getColumnsInfo())) {
            $this->object->setDataValue('datVyst', new \DateTime());
        }
        $this->object->setDataValue('test', 'test');
        $this->object->setDataValue('kod', 'code:testKOD');
        $this->assertEquals('testKOD', $this->object->getDataValue('kod'));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::saveDebugFiles
     */
    public function testSaveDebugFiles() {
        $this->object->saveDebugFiles();
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setPostFields
     * @covers AbraFlexi\AbraFlexiRO::getPostFields
     */
    public function testSetPostFields() {
        $this->object->setPostFields('test');
        $this->assertEquals($this->object->getPostFields(), 'test');
    }

    /**
     * PHP Date object to AbraFlexi date format test
     * 
     * @covers AbraFlexi\AbraFlexiRO::dateToFlexiDate
     */
    public function testDateToFlexiDate() {
        $dater = new \DateTime();
        $this->assertEquals($dater->format(RO::$DateFormat),
                RO::dateToFlexiDate($dater));
    }

    /**
     * PHP Date object to AbraFlexi dateTime format test
     * 
     * @covers AbraFlexi\AbraFlexiRO::dateToFlexiDateTime
     */
    public function testDateToFlexiDateTime() {
        $dater = new \DateTime();
        $this->assertEquals($dater->format(RO::$DateTimeFormat),
                RO::dateToFlexiDateTime($dater));
    }

    public function testSetFilter() {
        $this->object->setFilter('X');
        $this->object->setFilter(['a' => 'b']);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getColumnInfo
     */
    public function testGetColumnInfo() {
        $this->object->getColumnInfo('id');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getAbraFlexiURL
     */
    public function testGetAbraFlexiURL() {
        $this->object->getAbraFlexiURL();
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::error500Reporter
     */
    public function testError500Reporter() {
        $this->object->reportRecipient = 'testreports@vitexsoftware.cz';
        $this->object->error500Reporter(['success' => 'false', 'message' => 'test']);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::setMyKey
     */
    public function testSetMyKey() {
        $this->object->setMyKey(1);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::ignore404
     */
    public function testIgnore404() {
        $this->object->ignore404(true);
        $this->assertTrue($this->object->ignore404());
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::sendByMail
     */
    public function testSendByMail() {
        $this->object->sendByMail($this->object->reportRecipient, 'test',
                'test body');
    }

    /**
     * @expectedException        Ease\Exception
     * @expectedExceptionMessage Unknown language ua for PDF export
     * @covers AbraFlexi\AbraFlexiRO::getInFormat
     */
    public function testGetInFormat() {
        $this->object->evidence = 'test';
        $this->object->getInFormat('html', 'test');
        $this->object->getInFormat('pdf', 'test');
        $this->object->getInFormat('pdf', 'test', 'cs', true);
        $this->object->getInFormat('pdf', 'error', 'ua', false);
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::downloadInFormat
     */
    public function testDownloadInFormat() {
        $this->object->downloadInFormat('pdf', sys_get_temp_dir() . '/');
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::getReportsInfo
     */
    public function testGetReportsInfo() {
        $result = $this->object->getReportsInfo();
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'evidence-list':
                break;
            default:
                $this->assertNotEmpty($result,
                        'Cannot obtain reports for ' . $this->object->getEvidence());
                break;
        }
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::code
     */
    public function testCode() {
        $this->assertEquals('code:TEST', RO::code('test'));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::uncode
     */
    public function testUncode() {
        $this->assertEquals('test', RO::uncode('code:test'));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::arrayCleanUP
     */
    public function testArrayCleanUP() {
        $this->assertEquals(['a' => 'b'],
                RO::arrayCleanUP(['a' => 'b', '@a' => 'aaa']));
    }

    /**
     * @covers AbraFlexi\AbraFlexiRO::__destruct
     */
    public function test_destruct() {
        $this->object->__destruct();
    }

}
