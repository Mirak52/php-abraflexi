<?php

/**
 * AbraFlexi - Objekt firmy.
 *
 * @author     Vítězslav Dvořák <vitex@arachne.cz>
 * @copyright  (C) 2015-2017 Spoje.Net
 */

namespace Test\AbraFlexi;

use AbraFlexi\Company;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-27 at 17:54:36.
 */
class CompanyTest extends ROTest {

    /**
     * @var Company
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new Company;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * @covers Ease\Brick::getMyKey
     */
    public function testGetMyKey() {
        $this->assertEquals('X', $this->object->getmyKey(['dbNazev' => 'X']));
    }

    /**
     * @covers AbraFlexi\Company::processInit
     */
    public function testProcessInit() {
        $this->object->processInit(['dbNazev' => constant('ABRAFLEXI_COMPANY')]);
        $this->assertEquals(constant('ABRAFLEXI_COMPANY'), $this->object->company);
        $this->assertEquals(200, $this->object->lastResponseCode);
    }

    /**
     * @covers AbraFlexi\Company::getRecordID
     */
    public function testGetRecordID() {
        $this->object->setData(['dbNazev' => 'TEST']);
        $this->assertEquals('TEST', $this->object->getRecordID());
    }

    /**
     * @covers AbraFlexi\Company::objectToID
     */
    public function testObjectToID() {
        $this->assertEquals('TEST', $this->object->objectToID('TEST'));
    }

    /**
     * @covers AbraFlexi\Company::performRequest
     */
    public function testPerformRequest() {
        $json = $this->object->performRequest();
        $this->assertArrayHasKey('company', $json);

        $xml = $this->object->performRequest(null, 'GET', 'xml');
        $this->assertArrayHasKey('company', $xml);
        $nonExist = $this->object->performRequest('error.json');
        $this->assertEquals($nonExist['success'], 'false');
    }

    /**
     * @covers AbraFlexi\Company::getFlexiData
     */
    public function testGetFlexiData() {
        $flexidata = $this->object->getFlexiData();
        $this->assertArrayHasKey(0, $flexidata);
        $this->assertArrayHasKey('id', $flexidata[0]);
    }

    /**
     * @covers AbraFlexi\Company::getResponseEvidence
     */
    public function testGetResponseEvidence() {
        $this->assertEquals('company', $this->object->getResponseEvidence());
    }

    /**
     * @covers AbraFlexi\Company::__toString
     */
    public function testtoString() {
        $company = 'test';
        $this->object->setDataValue('dbNazev', $company);
        $this->assertEquals($company, (string) $this->object);
    }

    /**
     * @covers AbraFlexi\Company::draw
     */
    public function testDraw($whatWant = NULL) {
        $this->object->setDataValue('dbNazev', 'test');
        $this->assertEquals('test', $this->object->draw());
    }

}
