<?php

namespace Test\AbraFlexi;

use AbraFlexi\Stitek;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-27 at 17:32:11.
 */
class StitekTest extends RWTest {

    /**
     * @var Stitek
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new Stitek;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * @covers AbraFlexi\Stitek::getLabels
     */
    public function testGetLabels() {
        $this->object->getLabels(new \AbraFlexi\Adresar());
    }

    /**
     * @covers AbraFlexi\Stitek::listToArray
     */
    public function testListToArray() {
        $this->assertEquals(['A' => 'A', 'B' => 'B'], Stitek::listToArray('A,B'));
    }

    /**
     * @covers AbraFlexi\Stitek::getAvailbleLabels
     */
    public function testGetAvailbleLabels() {
        $labels = \AbraFlexi\Stitek::getAvailbleLabels(new \AbraFlexi\FakturaVydana());
        $this->assertTrue(is_array($labels) && count($labels));
    }

    /**
     * @covers AbraFlexi\Stitek::setLabel
     * @todo   Implement testSetLabel().
     */
    public function testSetLabel() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Stitek::unsetLabel
     * @todo   Implement testUnsetLabel().
     */
    public function testUnsetLabel() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Stitek::createNew
     */
    public function testCreateNew() {
        $this->assertFalse($this->object->createNew('Without Invoice',
                        ['pokladna']));

        $testCode = \Ease\Functions::randomString();

        $this->assertTrue($this->object->createNew('Example Label',
                        ['faktura-vydana', 'faktura-prijata'], ['kod' => $testCode]));

        $this->object->deleteFromAbraFlexi($this->object->getRecordIdent()); //Cleanup
    }

}
