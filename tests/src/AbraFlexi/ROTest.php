<?php

declare(strict_types=1);

/**
 * This file is part of the EaseCore package.
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi;

use AbraFlexi\RO;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-04 at 10:08:36.
 */
class ROTest extends \Test\Ease\SandTest
{
    /**
     * Example JSON.
     *
     * @var string json
     */
    public string $json = '{"winstrom":{"@version":"1.0","adresar":[{"id":"2574","kontakty":[{"id":"299"}]}]}}';

    /**
     * Example XML.
     *
     * @var string xml
     */
    public string $xml = <<<'EOD'
<?xml version="1.0" encoding="utf-8"?>

<winstrom version="1.0">
  <!-- Adresář -->
  <adresar>
    <!-- ID (celé číslo) - -->
    <id>2574</id>
    <kontakty>
      <!-- Kontakty -->
      <kontakt>
        <!-- ID (celé číslo) - -->
        <id>299</id>
      </kontakt>
    </kontakty>
  </adresar>
</winstrom>
EOD;
    protected RO $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @covers \AbraFlexi\RO::__construct
     */
    protected function setUp(): void
    {
        $this->object = new RO();
        $this->object->prefix = '/';
        $this->object->debug = true;
        $this->object->reportRecipient = 'testreports@vitexsoftware.cz';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \AbraFlexi\RO::logBanner
     */
    public function testLogBanner(): void
    {
        \Ease\Logger\Regent::singleton()->cleanMessages();
        $this->object->logBanner(addslashes(\get_class($this)));
        $messages = \Ease\Logger\Regent::singleton()->getMessages();
        $this->assertNotEmpty(strstr($messages[0]->body, 'ServerURL http'));
    }

    /**
     * Test Constructor.
     *
     * @depends testLogBanner
     *
     * @covers \AbraFlexi\RO::__construct
     */
    public function testConstructor(): void
    {
        $classname = \get_class($this->object);
        $evidence = $this->object->getEvidence();

        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();
        $mock->__construct(1, ['debug' => false]);

        if (!isset(\AbraFlexi\EvidenceList::$name[$evidence])) {
            $evidence = 'adresar';
        }

        $mock->__construct(
            '',
            [
                'company' => \constant('ABRAFLEXI_COMPANY'),
                'url' => \constant('ABRAFLEXI_URL'),
                'user' => \constant('ABRAFLEXI_LOGIN'),
                'password' => \constant('ABRAFLEXI_PASSWORD'),
                'debug' => true,
                'prefix' => 'c',
                'evidence' => $evidence],
        );
    }

    /**
     * @covers \AbraFlexi\RO::curlInit
     */
    public function testCurlInit(): void
    {
        $this->object->timeout = 120;
        $this->object->curlInit();
        $this->assertTrue(\is_resource($this->object->curl));
    }

    /**
     * @covers \AbraFlexi\RO::processInit
     */
    public function testProcessInit(): void
    {
        $this->object->processInit(1);
        $this->object->processInit(['id' => 1]);
        $this->assertEquals(1, $this->object->getDataValue('id'));

        if (null !== $this->object->evidence && $this->object->evidence !== 'test') {
            $firstID = $this->object->getColumnsFromAbraFlexi(
                ['id', 'kod'],
                ['limit' => 1],
            );

            if (\count($firstID) && isset($firstID[0]['id'])) {
                $this->object->processInit((int) current($firstID));
                $this->assertNotEmpty($this->object->__toString());

                if (isset($firstID[0]['kod'])) {
                    $this->object->processInit('code:'.$firstID[0]['kod']);
                    $this->assertNotEmpty($this->object->__toString());
                }

                $this->object->processInit($this->object->getEvidenceURL().'/'.$firstID[0]['id'].'.xml');
            } else {
                $this->markTestSkipped(sprintf(
                    'Evidence %s does not contain first record',
                    $this->object->getEvidence(),
                ));
            }
        }
    }

    /**
     * @covers \AbraFlexi\RO::setUp
     */
    public function testSetUp(): void
    {
        $this->object->authSessionId = 'XXXtestXXX';
        $this->object->setUp(
            [
                'company' => 'cmp',
                'url' => 'url',
                'user' => 'usr',
                'password' => 'pwd',
                'prefix' => 'c',
                'debug' => true,
                'defaultUrlParams' => ['limit' => 10],
                'evidence' => 'smlouva',
                'detail' => 'summary',
                'filter' => 'testfilter',
                'ignore404' => true,
                'offline' => true,
            ],
        );
        $this->assertEquals('cmp', $this->object->company);
        $this->assertEquals('url', $this->object->url);
        $this->assertEquals('usr', $this->object->user);
        $this->assertEquals('/c/', $this->object->prefix);
        $this->assertEquals('pwd', $this->object->password);
    }

    /**
     * @covers \AbraFlexi\RO::getConnectionOptions
     */
    public function testGetConnectionOptions(): void
    {
        $options = $this->object->getConnectionOptions();
        $this->assertArrayHasKey('url', $options);
        $this->object->timeout = 120;
        $this->object->authSessionId = 'sessid';
        $this->object->setCompany('test');
        $this->object->getConnectionOptions();
    }

    /**
     * @covers \AbraFlexi\RO::setPrefix
     */
    public function testSetPrefix(): void
    {
        $this->expectException(\Exception::class);

        $this->object->setPrefix('c');
        $this->assertEquals('/c/', $this->object->prefix);
        $this->object->setPrefix(null);
        $this->assertEquals('', $this->object->prefix);
        $this->object->setPrefix('fail');
    }

    /**
     * @covers \AbraFlexi\RO::setFormat
     */
    public function testSetFormat(): void
    {
        $this->object->setFormat('xml');
        $this->assertEquals('xml', $this->object->format);
    }

    /**
     * We can set only evidence defined in EvidenceList class.
     *
     * @covers \AbraFlexi\RO::setEvidence
     */
    public function testSetEvidence(): void
    {
        $this->expectException(\Exception::class);

        $this->object->setEvidence('adresar');
        $this->assertEquals('adresar', $this->object->evidence);
        $this->object->setPrefix('c');
        $this->object->debug = true;
        $this->object->setEvidence('fail');
    }

    /**
     * @covers \AbraFlexi\RO::setCompany
     */
    public function testSetCompany(): void
    {
        $this->object->setCompany('test_s_r_o_');
        $this->assertEquals('test_s_r_o_', $this->object->company);
    }

    /**
     * @covers \AbraFlexi\RO::object2array
     */
    public function testObject2array(): void
    {
        $this->assertNull($this->object->object2array(new \stdClass()));
        $this->assertEquals(
            [
                'item' => 1,
                'arrItem' => ['a', 'b' => 'c'],
            ],
            $this->object->object2array(new \Test\ObjectForTesting()),
        );
    }

    /**
     * @covers \AbraFlexi\RO::objectToID
     */
    public function testObjectToID(): void
    {
        $this->object->setDataValue('kod', 'TEST');
        $this->assertEquals(
            'code:TEST',
            $this->object->objectToID($this->object),
        );

        $this->assertEquals('TEST', $this->object->objectToID('TEST'));
    }

    /**
     * @covers \AbraFlexi\RO::setObjectName
     *
     * @todo   Implement testsetObjectName().
     */
    public function testsetObjectName(): void
    {
        $this->assertEquals('', $this->object->setObjectName());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::companyUrlToOptions
     *
     * @todo   Implement testcompanyUrlToOptions().
     */
    public function testcompanyUrlToOptions(): void
    {
        $this->assertEquals('', $this->object->companyUrlToOptions());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::configToEnv
     *
     * @todo   Implement testconfigToEnv().
     */
    public function testconfigToEnv(): void
    {
        $this->assertEquals('', $this->object->configToEnv());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::stripBody
     *
     * @todo   Implement teststripBody().
     */
    public function teststripBody(): void
    {
        $this->assertEquals('', $this->object->stripBody());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::updateApiURL
     *
     * @todo   Implement testupdateApiURL().
     */
    public function testupdateApiURL(): void
    {
        $this->assertEquals('', $this->object->updateApiURL());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::fixResponseTypes
     *
     * @todo   Implement testfixResponseTypes().
     */
    public function testfixResponseTypes(): void
    {
        $this->assertEquals('', $this->object->fixResponseTypes());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::fixRecordTypes
     *
     * @todo   Implement testfixRecordTypes().
     */
    public function testfixRecordTypes(): void
    {
        $this->assertEquals('', $this->object->fixRecordTypes());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::parseError
     *
     * @todo   Implement testparseError().
     */
    public function testparseError(): void
    {
        $this->assertEquals('', $this->object->parseError());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::contentTypeToResponseFormat
     *
     * @todo   Implement testcontentTypeToResponseFormat().
     */
    public function testcontentTypeToResponseFormat(): void
    {
        $this->assertEquals('', $this->object->contentTypeToResponseFormat());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::__destruct
     *
     * @todo   Implement test__destruct().
     */
    public function testDestruct(): void
    {
        $this->assertEquals('', $this->object->__destruct());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::reload
     *
     * @todo   Implement testreload().
     */
    public function testreload(): void
    {
        $this->assertEquals('', $this->object->reload());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::urlizeId
     *
     * @todo   Implement testurlizeId().
     */
    public function testurlizeId(): void
    {
        $this->assertEquals('', $this->object->urlizeId());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::setPostFields
     *
     * @todo   Implement testsetPostFields().
     */
    public function testsetPostFields(): void
    {
        $this->assertEquals('', $this->object->setPostFields());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getPostFields
     *
     * @todo   Implement testgetPostFields().
     */
    public function testgetPostFields(): void
    {
        $this->assertEquals('', $this->object->getPostFields());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getRecordCode
     *
     * @todo   Implement testgetRecordCode().
     */
    public function testgetRecordCode(): void
    {
        $this->assertEquals('', $this->object->getRecordCode());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::__toString
     *
     * @todo   Implement test__toString().
     */
    public function testToString(): void
    {
        $this->assertEquals('', $this->object->__toString());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getPrevRecordID
     *
     * @todo   Implement testgetPrevRecordID().
     */
    public function testgetPrevRecordID(): void
    {
        $this->assertEquals('', $this->object->getPrevRecordID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getExternalIDs
     *
     * @todo   Implement testgetExternalIDs().
     */
    public function testgetExternalIDs(): void
    {
        $this->assertEquals('', $this->object->getExternalIDs());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getOfflineColumnsInfo
     *
     * @todo   Implement testgetOfflineColumnsInfo().
     */
    public function testgetOfflineColumnsInfo(): void
    {
        $this->assertEquals('', $this->object->getOfflineColumnsInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getOnlineColumnsInfo
     *
     * @todo   Implement testgetOnlineColumnsInfo().
     */
    public function testgetOnlineColumnsInfo(): void
    {
        $this->assertEquals('', $this->object->getOnlineColumnsInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::updateColumnsInfo
     *
     * @todo   Implement testupdateColumnsInfo().
     */
    public function testupdateColumnsInfo(): void
    {
        $this->assertEquals('', $this->object->updateColumnsInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getColumnInfo
     *
     * @todo   Implement testgetColumnInfo().
     */
    public function testgetColumnInfo(): void
    {
        $this->assertEquals('', $this->object->getColumnInfo());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getAbraFlexiURL
     *
     * @todo   Implement testgetAbraFlexiURL().
     */
    public function testgetAbraFlexiURL(): void
    {
        $this->assertEquals('', $this->object->getAbraFlexiURL());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::requestAuthSessionID
     *
     * @todo   Implement testrequestAuthSessionID().
     */
    public function testrequestAuthSessionID(): void
    {
        $this->assertEquals('', $this->object->requestAuthSessionID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::login
     *
     * @todo   Implement testlogin().
     */
    public function testlogin(): void
    {
        $this->assertEquals('', $this->object->login());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::logout
     *
     * @todo   Implement testlogout().
     */
    public function testlogout(): void
    {
        $this->assertEquals('', $this->object->logout());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getLastOperationType
     *
     * @todo   Implement testgetLastOperationType().
     */
    public function testgetLastOperationType(): void
    {
        $this->assertEquals('', $this->object->getLastOperationType());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getErrors
     *
     * @todo   Implement testgetErrors().
     */
    public function testgetErrors(): void
    {
        $this->assertEquals('', $this->object->getErrors());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::__wakeup
     *
     * @todo   Implement test__wakeup().
     */
    public function testWakeup(): void
    {
        $this->assertEquals('', $this->object->__wakeup());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getMyKey
     *
     * @todo   Implement testgetMyKey().
     */
    public function testgetMyKey(): void
    {
        $this->assertEquals('', $this->object->getMyKey());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getKeyColumn
     *
     * @todo   Implement testgetKeyColumn().
     */
    public function testgetKeyColumn(): void
    {
        $this->assertEquals('', $this->object->getKeyColumn());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::setKeyColumn
     *
     * @todo   Implement testsetKeyColumn().
     */
    public function testsetKeyColumn(): void
    {
        $this->assertEquals('', $this->object->setKeyColumn());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::performRequest
     */
    public function testPerformRequest(): void
    {
        $evidence = $this->object->getEvidence();

        switch ($evidence) {
            case null:
            case '':
            case 'c':
            case 'test':
            case 'status':
            case 'nastaveni':
                $this->object->performRequest(null, 'GET', 'xml');

                break;

            default:
                $this->object->performRequest(null, 'GET', 'json');
                $this->object->performRequest(null, 'GET', 'xml');

                break;
        }

        // 404 Test

        $notFound = $this->object->performRequest('error404.json');

        if (\array_key_exists('message', $notFound)) {
            $this->assertEquals('false', $notFound['success']);
        } else {
            echo '';
        }
    }

    /**
     * @covers \AbraFlexi\RO::rawResponseToArray
     */
    public function testRawResponseToArray(): void
    {
        $this->assertIsArray($this->object->rawResponseToArray($this->json, 'json'));
        $this->assertIsArray($this->object->rawResponseToArray($this->xml, 'xml'));
        $this->assertIsArray($this->object->rawResponseToArray('simpletext', 'txt'));
        $this->assertIsArray($this->object->rawResponseToArray('othertext', 'other'));
    }

    /**
     * @covers \AbraFlexi\RO::rawJsonToArray
     */
    public function testRawJsonToArray(): void
    {
        $this->assertNull($this->object->rawJsonToArray($this->json.'XXX'));
        $evidence = $this->object->getResponseEvidence() ?: 'adresar';
        $arrayWeWant = [
            '@version' => '1.0',
            $evidence => [
                [
                    'id' => '2574',
                    'kontakty' => [
                        ['id' => '299'],
                    ],
                ],
            ],
        ];
        $this->assertEquals(
            $arrayWeWant,
            $this->object->rawJsonToArray($this->json),
        );
    }

    /**
     * @covers \AbraFlexi\RO::rawXmlToArray
     */
    public function testRawXmlToArray(): void
    {
        $evidence = $this->object->getResponseEvidence() ?: 'adresar';
        $arrayWeWant = [
            '@version' => '1.0',
            $evidence => [
                [
                    'id' => '2574',
                    'kontakty' => [
                        ['kontakt' => [
                            ['id' => '299'],
                        ],
                        ],
                    ],
                ],
            ],
        ];
        $this->assertEquals(
            $arrayWeWant,
            $this->object->rawXmlToArray($this->xml),
        );
    }

    /**
     * @covers \AbraFlexi\RO::parseResponse
     */
    public function testParseResponse(): void
    {
        //        $this->object->parseResponse($this->object->rawJsonToArray($this->json), 200);
        $mixedResponse = <<<'EOD'
{
  "winstrom": {
    "@version": "1.0",
    "success": "false",
    "stats": {
      "created": "0",
      "updated": "0",
      "deleted": "0",
      "skipped": "1",
      "failed": "1"
    },
    "results": [
      {
        "code": "Výpis 0 pro účet 2900886213/2010 -  Počet položek 0",
        "errors": [
          {
            "message": "Během stahování výpisu pro účet EURO FIO (2900886213/2010) došlo k chybě.\nNedodržujete minimální interval 30 sekund mezi dotazy na daný token (bez ohledu na typ formátu)."
          }
        ]
      },
      {
        "code": "Výpis 0 pro účet 2800061687 -  Počet položek 0",
        "infos": [
          {
            "message": "Načítání proběhlo úspěšně. Načtený výpis neobsahuje žádnou položku."
          }
        ]
      }
    ]
  }
}
EOD;

        $parsed = $this->object->parseResponse($this->object->rawJsonToArray($mixedResponse), 400);
    }

    /**
     * @covers \AbraFlexi\RO::doCurlRequest
     */
    public function testDoCurlRequest(): void
    {
        $this->object->doCurlRequest(\constant('ABRAFLEXI_URL'), 'GET');
    }

    /**
     * @covers \AbraFlexi\RO::setAction
     */
    public function testSetAction(): void
    {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->object->setAction('none');

                break;

            default:
                $this->assertTrue($this->object->setAction('new'));
                $this->object->actionsAvailable = [];
                $this->assertFalse($this->object->setAction('none'));
                $this->object->actionsAvailable = ['copy'];
                $this->assertFalse($this->object->setAction('none'));

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getEvidence
     */
    public function testGetEvidence(): void
    {
        $this->assertEquals(
            $this->object->evidence,
            $this->object->getEvidence(),
        );
    }

    /**
     * @covers \AbraFlexi\RO::getCompany
     */
    public function testGetCompany(): void
    {
        $this->assertEquals($this->object->company, $this->object->getCompany());
    }

    /**
     * @covers \AbraFlexi\RO::getResponseEvidence
     */
    public function testGetResponseEvidence(): void
    {
        $responseEvidence = $this->object->getResponseEvidence();

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;

            default:
                $this->assertEquals(
                    $this->object->getEvidence(),
                    $responseEvidence,
                );

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getLastInsertedId
     *
     * @depends testInsertToAbraFlexi
     */
    public function testGetLastInsertedId(): void
    {
        $this->assertNotEmpty($this->object->getLastInsertedId());
    }

    /**
     * @covers \AbraFlexi\RO::extractUrlParams
     */
    public function testExtractUrlParams(): void
    {
        $conditions = ['id' => 23, 'limit' => 10];
        $this->object->extractUrlParams($conditions, $urlParams);
        $this->assertEquals(['id' => 23], $conditions);
        $this->assertEquals(['limit' => 10], $urlParams);
    }

    /**
     * @covers \AbraFlexi\RO::urlEncode
     */
    public function testUrlEncode(): void
    {
        $this->assertEquals(
            "stitky%3D'code:VIP'%20or%20stitky%3D'code:DULEZITE'",
            RO::urlEncode("stitky='code:VIP' or stitky='code:DULEZITE'"),
        );
    }

    /**
     * @covers \AbraFlexi\RO::getAllFromAbraFlexi
     */
    public function testGetAllFromAbraFlexi(): void
    {
        $this->object->getAllFromAbraFlexi();
    }

    /**
     * @covers \AbraFlexi\RO::disconnect
     *
     * @depends testGetColumnsFromAbraFlexi
     * @depends testGetFlexiData
     * @depends testGetFlexiRow
     * @depends testIdExists
     * @depends testInsertToAbraFlexi
     * @depends testLoadFlexiData
     * @depends testLoadFromAbraFlexi
     * @depends testPerformRequest
     * @depends testRecordExists
     * @depends testSearchString
     */
    public function testDisconnect(): void
    {
        $this->object->disconnect();
        $this->assertNull($this->object->curl);
    }

    /**
     * @covers \AbraFlexi\RO::__destruct
     *
     * @depends testDisconnect
     */
    public function testdestruct(): void
    {
        $this->markTestSkipped();
    }

    /**
     * @covers \AbraFlexi\RO::getFlexiRow
     */
    public function testGetFlexiRow(): void
    {
        $this->object->getFlexiRow(0);
        $this->object->getFlexiRow(1);
    }

    /**
     * @covers \AbraFlexi\RO::getFlexiData
     */
    public function testGetFlexiData(): void
    {
        $evidence = $this->object->getEvidence();

        switch ($evidence) {
            case null:
                $this->object->getFlexiData();

                break;
            case 'c':
                $this->object->evidence = 'c';
                $this->object->prefix = '';
                $this->object->company = '';
                $this->object->nameSpace = 'companies';
                $flexidata = $this->object->getFlexiData();
                $this->assertArrayHasKey('company', $flexidata);

                break;
            case 'evidence-list':
                $flexidata = $this->object->getFlexiData(
                    '',
                    ['detail' => 'id'],
                );
                $this->assertArrayHasKey('evidenceType', $flexidata[0]);

                break;

            default:
                $flexidata = $this->object->getFlexiData(
                    '',
                    ['detail' => 'id'],
                );

                if (\is_array($flexidata)) {
                    if (\count($flexidata)) {
                        $this->markTestSkipped('Empty evidence');
                    } else {
                        $this->assertArrayHasKey(0, $flexidata);

                        $this->assertArrayHasKey('id', $flexidata[0]);
                        $filtrered = $this->object->getFlexiData(
                            '',
                            ['id = '.$flexidata[0]['id'], 'detail' => 'full'],
                        );
                        $this->assertArrayHasKey(0, $filtrered);
                        $this->assertArrayHasKey('id', $filtrered[0]);
                    }
                }

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::loadFromAbraFlexi
     */
    public function testLoadFromAbraFlexi(): void
    {
        $this->object->loadFromAbraFlexi();
        $this->object->loadFromAbraFlexi(222);
    }

    /**
     * @covers \AbraFlexi\RO::getJsonizedData
     */
    public function testGetJsonizedData(): void
    {
        $this->assertEquals(
            '{"'.$this->object->nameSpace.'":{"@version":"1.0","'.$this->object->evidence.'":{"key":"value"}}}',
            $this->object->getJsonizedData(['key' => 'value']),
        );

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->object->getJsonizedData(['key' => 'value']);

                break;

            default:
                $this->object->setAction('copy');
                $this->assertEquals(
                    '{"'.$this->object->nameSpace.'":{"@version":"1.0","'.$this->object->evidence.'":{"key":"value"},"'.$this->object->evidence.'@action":"copy"}}',
                    $this->object->getJsonizedData(['key' => 'value']),
                );

                $this->object->action = 'storno';
                $this->object->filter = "stavUhrK = 'stavUhr.uhrazeno'";
                $this->object->getJsonizedData([]);

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getDataForJSON
     */
    public function testGetDataForJson(): void
    {
        $this->object->getDataForJSON();
    }

    /**
     * @covers \AbraFlexi\RO::idExists
     */
    public function testIdExists(): void
    {
        $this->assertFalse($this->object->idExists('nonexistent'));

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;

            default:
                $first = $this->object->getColumnsFromAbraFlexi(
                    ['id'],
                    ['limit' => 1],
                    'id',
                );

                if (empty($first)) {
                    $this->markTestSkipped('empty evidence ?');
                } else {
                    $this->object->setData($first);
                    $this->assertTrue($this->object->idExists());
                }

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getRecordID
     */
    public function testGetRecordID(): void
    {
        $this->object->setData([$this->object->getKeyColumn() => 10]);
        $this->assertEquals(10, $this->object->getRecordID());
    }

    /**
     * @covers \AbraFlexi\RO::getRecordIdent
     */
    public function testGetRecordIdent(): void
    {
        $this->object->dataReset();
        $this->assertNull($this->object->getRecordIdent());

        $this->object->setMyKey(20);
        $this->assertEquals(20, $this->object->getRecordIdent());

        $this->object->setDataValue('kod', 'test');
        $this->assertEquals('code:TEST', $this->object->getRecordIdent());

        $this->object->setDataValue('external-ids', ['ext:test:10']);
        $this->assertEquals('ext:test:10', $this->object->getRecordIdent());
    }

    /**
     * @covers \AbraFlexi\RO::recordExists
     */
    public function testRecordExists(): void
    {
        $evidence = $this->object->getEvidence();

        switch ($evidence) {
            case null:
            case 'c':
            case 'status':
            case 'evidence-list':
                $this->object->recordExists();

                break;

            default:
                $flexidata = $this->object->getFlexiData(
                    '',
                    ['limit' => 1, 'detail' => 'id'],
                );

                if (\is_array($flexidata) && !\count($flexidata)) {
                    $this->assertFalse(
                        $this->object->recordExists(['id' => 1]),
                        'Record ID 1 exists in empty evidence ?',
                    );
                } else {
                    if (null !== $flexidata) {
                        $this->assertTrue(
                            $this->object->recordExists('code:TEST'),
                            'code:TEST exists test failed',
                        );
                        $this->object->setData(['id' => (int) $flexidata[0]['id']]);
                        $this->assertTrue(
                            $this->object->recordExists(),
                            'First record exists test failed',
                        );
                        $this->assertFalse(
                            $this->object->recordExists(['id' => 0]),
                            'Record ID 0 exists',
                        );
                        $this->assertFalse(
                            $this->object->recordExists(['unexistent' => 1]),
                            'Unexistent Record exist ?',
                        );
                    }
                }

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getColumnsFromAbraFlexi
     */
    public function testGetColumnsFromAbraFlexi(): void
    {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;

            default:
                $this->object->getColumnsFromAbraFlexi(
                    ['id', 'kod'],
                    ['limit' => 1],
                    'id',
                );
                $this->object->getColumnsFromAbraFlexi(
                    'summary',
                    ['limit' => 1],
                    'id',
                );

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getExternalID
     */
    public function testGetExternalID(): void
    {
        $this->assertEmpty($this->object->getExternalID('ext:test:10')); // ext: does not exist

        $this->object->setDataValue(
            'external-ids',
            ['ext:doe:22', 'ext:test:10'],
        );

        $this->assertEquals('ext:doe:22', $this->object->getExternalID());
        $this->assertEquals('10', $this->object->getExternalID('test'));
    }

    /**
     * @covers \AbraFlexi\RO::getGlobalVersion
     */
    public function testGetGlobalVersion(): void
    {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->object->getGlobalVersion();

                break;

            default:
                $this->assertIsInt(
                    $this->object->getGlobalVersion(),
                    'error obtaining of GlobalVersion',
                );

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getApiURL
     */
    public function testGetApiUrl(): void
    {
        $evidence = $this->object->getEvidence();

        if ($evidence) {
            $url = $this->object->url.'/c/'.\constant('ABRAFLEXI_COMPANY').'/'.$evidence;
        } else {
            $url = $this->object->url.'/c/'.\constant('ABRAFLEXI_COMPANY');
        }

        $this->assertEquals($url, $this->object->getApiURL());
        $this->assertEquals($url.'.html', $this->object->getApiURL('html'));
        $this->assertEquals($url.'.xml', $this->object->getApiURL('xml'));
    }

    /**
     * @covers \AbraFlexi\RO::getResponseFormat
     */
    public function testGetResponseFormat(): void
    {
        $this->object->performRequest(null, 'GET', 'json');
        $this->assertEquals('json', $this->object->getResponseFormat());
        $this->object->performRequest(null, 'GET', 'xml');
        $this->assertEquals('xml', $this->object->getResponseFormat());
        unset($this->object->curlInfo['content_type']);
        $this->assertNull($this->object->getResponseFormat());
    }

    /**
     * @covers \AbraFlexi\RO::getKod
     */
    public function testGetKod(): void
    {
        $testString = [];
        $this->assertEquals(
            'code:CODE',
            $this->object->getKod([$this->object->keyColumn => 'code']),
        );

        $testString[$this->object->nameColumn] = 'Fish clamp -  Úchytka pro instalaci samonosných kabelů '
                .'(3.5 mm)';
        $code0 = $this->object->getKod($testString);
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR', $code0);
        $code1 = $this->object->getKod(
            $testString,
            false,
        );
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR', $code1);
        $code2 = $this->object->getKod($testString);
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR1', $code2);
        $this->object->setData($testString);
        $code3 = $this->object->getKod();
        $this->assertEquals('code:FISHCLAMPUCHYTKAPR2', $code3);

        $this->assertEquals(
            'code:TEST',
            $this->object->getKod([$this->object->nameColumn => 'test']),
        );

        $this->assertEquals('code:TEST1', $this->object->getKod('test'));

        $this->assertEquals(
            'code:TEST2',
            $this->object->getKod(['kod' => 'test']),
        );
        $this->assertEquals('code:NOTSET', $this->object->getKod(['kod' => '']));
    }

    /**
     * @covers \AbraFlexi\RO::flexiUrl
     */
    public function testFlexiUrl(): void
    {
        $this->assertEquals(
            "a eq '1' and b eq 'foo'",
            $this->object->flexiUrl(['a' => 1, 'b' => 'foo'], 'and'),
        );
        $this->assertEquals(
            "a eq '1' or b eq 'bar'",
            $this->object->flexiUrl(['a' => 1, 'b' => 'bar'], 'or'),
        );
        $this->assertEquals(
            'a eq true or b eq false',
            $this->object->flexiUrl(['a' => true, 'b' => false], 'or'),
        );
        $this->assertEquals(
            'a is null and b is not null',
            $this->object->flexiUrl(['a' => null, 'b' => '!null'], 'and'),
        );

        $begin = new \DateTime('2018-08-01');
        $end = new \DateTime('2018-08-31');
        $end = $end->modify('+1 day');

        $interval = new \DateInterval('P1D');
        $daterange = new \DatePeriod($begin, $interval, $end);

        $this->assertEquals(
            "a eq '2018-10-25' and b between '2018-08-01' '2018-09-01'",
            $this->object->flexiUrl(['a' => new \DateTime('25-10-2018'), 'b' => $daterange]),
        );
    }

    /**
     * @covers \AbraFlexi\RO::unifyResponseFormat
     */
    public function testunifyResponseFormat(): void
    {
        $this->assertNull($this->object->unifyResponseFormat(null));
        // One Row Test

        $responseEvidence = $this->object->getResponseEvidence();

        if (empty($responseEvidence)) {
            $responseEvidence = $this->object->evidence = 'test';
        }

        $test1raw = [$responseEvidence => ['id' => 1, 'name' => 'value'],
        ];

        $test1expected = [$responseEvidence => [
            ['id' => 1, 'name' => 'value'],
        ],
        ];

        $this->assertEquals(
            $test1expected,
            $this->object->unifyResponseFormat($test1raw),
        );

        // Two Row Test
        $test2Raw = [$this->object->getResponseEvidence() => [
            ['id' => 1, 'name' => 'value'],
            ['id' => 2, 'name' => 'value2'],
        ],
        ];

        $test2expected = [$this->object->getResponseEvidence() => [
            ['id' => 1, 'name' => 'value'],
            ['id' => 2, 'name' => 'value2'],
        ],
        ];

        $this->assertEquals(
            $test2expected,
            $this->object->unifyResponseFormat($test2Raw),
        );
    }

    /**
     * @covers \AbraFlexi\RO::__toString
     */
    public function testtoString(): void
    {
        $id = '123';
        $this->object->setMyKey($id);
        $this->assertEquals($id, (string) $this->object);

        $this->object->setDataValue('kod', 'test');
        $this->assertEquals('code:TEST', (string) $this->object);

        $identifer = 'ext:test:123';
        $this->object->setMyKey($identifer);
        $this->assertEquals($identifer, (string) $this->object);

        $this->object->dataReset();
        $this->assertEquals('', $this->object->__toString());
    }

    /**
     * @covers \AbraFlexi\RO::draw
     *
     * @param null|mixed $whatWant
     */
    public function testDraw($whatWant = null): void
    {
        $this->object->setDataValue('kod', 'test');
        $this->assertEquals('code:TEST', $this->object->draw());
    }

    /**
     * @covers \AbraFlexi\RO::getColumnsInfo
     */
    public function testgetColumnsInfo(): void
    {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'evidence-list':
                $this->assertNull($this->object->getColumnsInfo());

                break;

            default:
                $this->assertNotEmpty(
                    $this->object->getColumnsInfo(),
                    'Cannot obtain structure for '.$this->object->getEvidence(),
                );

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getNextRecordID
     *
     * @todo   Implement testgetNextRecordID().
     */
    public function testgetNextRecordID(): void
    {
        $this->assertEquals('', $this->object->getNextRecordID());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\RO::getActionsInfo
     */
    public function testgetActionsInfo(): void
    {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                $this->assertNull($this->object->getActionsInfo());
                $this->assertNotEmpty(
                    $this->object->getActionsInfo('faktura-vydana'),
                    'Cannot obtain actions for na evidence',
                );

                break;

            default:
                $this->assertNotEmpty(
                    $this->object->getActionsInfo(),
                    'Cannot obtain actions for '.$this->object->getEvidence(),
                );

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getRelationsInfo
     */
    public function testgetRelationsInfo(): void
    {
        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'strom-cenik':
            case 'ucetni-obdobi':
            case 'evidence-list':
                $this->assertNull($this->object->getRelationsInfo());

                break;

            default:
                $this->assertNotEmpty(
                    $this->object->getRelationsInfo(),
                    'Cannot obtain relations for '.$this->object->getEvidence(),
                );

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getEvidenceUrl
     */
    public function testgetEvidenceUrl(): void
    {
        $this->assertNotEmpty($this->object->getEvidenceUrl());
        $this->assertNotEmpty($this->object->getEvidenceUrl('/properties'));
    }

    /**
     * @covers \AbraFlexi\RO::evidenceToClassName
     */
    public function testevidenceToClassName(): void
    {
        $this->assertEquals(
            'FakturaVydana',
            $this->object->evidenceToClassName('faktura-vydana'),
        );
    }

    /**
     * @covers \AbraFlexi\RO::getEvidenceInfo
     */
    public function testGetEvidenceInfo(): void
    {
        $eInfo = $this->object->getEvidenceInfo();

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;

            default:
                $this->assertArrayHasKey('evidencePath', $eInfo);

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getEvidenceName
     */
    public function testGetEvidenceName(): void
    {
        $evidenceName = $this->object->getEvidenceName();

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;

            default:
                $this->assertNotEmpty($evidenceName);

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::saveResponseToFile
     */
    public function testSaveResponseToFile(): void
    {
        $tmp = sys_get_temp_dir().'/'.tmpfile();
        $this->object->saveResponseToFile($tmp);
        $this->assertFileExists($tmp);
    }

    /**
     * @covers \AbraFlexi\RO::getFirstRecordID()
     */
    public function testgetFirstRecordID(): void
    {
        $this->object->getFirstRecordID();

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;

            default:
                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::getVazby
     */
    public function testGetVazby(): void
    {
        $this->expectException(\Exception::class);

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'nastaveni':
            case 'evidence-list':
                break;

            default:
                $this->object->getVazby($this->object->getMyKey());

                break;
        }

        $this->object->getVazby();
    }

    /**
     * @covers \AbraFlexi\RO::evidenceUrlWithSuffix
     */
    public function testEvidenceUrlWithSuffix(): void
    {
        $urlraw = $this->object->getEvidenceURL();
        $lala = $this->object->evidenceUrlWithSuffix('lala');
        $this->assertEquals($urlraw.'/lala', $lala);
        $lolo = $this->object->evidenceUrlWithSuffix('?lele');
        $this->assertEquals($urlraw.'?lele', $lolo);
        $lulu = $this->object->evidenceUrlWithSuffix(';lulu');
        $this->assertEquals($urlraw.';lulu', $lulu);
    }

    /**
     * @covers \AbraFlexi\RO::join
     */
    public function testJoin(): void
    {
        $this->expectException(\Ease\Exception::class);

        $ada = new RO(['id' => 'A'], ['evidence' => 'adresar']);
        $adb = new RO(['id' => 'B'], ['evidence' => 'adresar']);
        $this->assertTrue($this->object->join($ada));
        $this->assertTrue($this->object->join($adb));
        $ads = new \stdClass();
        $this->object->join($ads);
    }

    /**
     * @covers \AbraFlexi\RO::addDefaultUrlParams
     */
    public function testAddDefaultUrlParams(): void
    {
        $this->object->defaultUrlParams = [];
        $this->assertEquals(
            'http://vitexsoftware.cz?a=b',
            $this->object->addDefaultUrlParams('http://vitexsoftware.cz?a=b'),
        );
        $this->object->defaultUrlParams['id'] = 1;
        $this->assertEquals(
            'http://vitexsoftware.cz/path?id=1&a=b',
            $this->object->addDefaultUrlParams('http://vitexsoftware.cz/path?a=b'),
        );
    }

    public function testFlexiDateToDateTime(): void
    {
        $this->assertEquals(
            1495749600,
            RO::flexiDateToDateTime('2017-05-26+02:00')->getTimestamp(),
        );
    }

    public function testFlexiDateTimeToDateTime(): void
    {
        $this->assertEquals(
            1506412853,
            RO::flexiDateTimeToDateTime('2017-09-26T10:00:53.755+02:00')->getTimestamp(),
        );
    }

    /**
     * @covers \AbraFlexi\RO::takeData
     */
    public function testTakeData(): void
    {
        $this->object->takeData(['id' => 1]);
        $this->assertEquals(
            \constant('ABRAFLEXI_URL').'/'.\constant('ABRAFLEXI_COMPANY').'/1',
            $this->object->getApiURL(),
        );

        $this->object->dataReset();
        $this->object->takeData(['kod' => 'test']);
        $this->assertEquals(
            \constant('ABRAFLEXI_URL').'/'.\constant('ABRAFLEXI_COMPANY').'/code:TEST',
            $this->object->getApiURL(),
        );
    }

    /**
     * @covers \AbraFlexi\RO::setDataValue
     */
    public function testSetDataValue(): void
    {
        if (!empty($this->object->getColumnsInfo())) {
            $this->object->setDataValue('datVyst', new \DateTime());
        }

        $this->object->setDataValue('test', 'test');
        $this->object->setDataValue('kod', 'code:testKOD');
        $this->assertEquals('testKOD', $this->object->getDataValue('kod'));
    }

    /**
     * @covers \AbraFlexi\RO::saveDebugFiles
     */
    public function testSaveDebugFiles(): void
    {
        $this->object->saveDebugFiles();
    }

    public function testSetFilter(): void
    {
        $this->object->setFilter('X');
        $this->object->setFilter(['a' => 'b']);
    }

    /**
     * @covers \AbraFlexi\RO::error500Reporter
     */
    public function testError500Reporter(): void
    {
        $this->object->reportRecipient = 'testreports@vitexsoftware.cz';
        $this->object->error500Reporter(['success' => 'false', 'message' => 'test']);
    }

    /**
     * @covers \AbraFlexi\RO::setMyKey
     */
    public function testSetMyKey(): void
    {
        $key = \Ease\Functions::randomNumber();
        $this->object->setMyKey($key);
        $this->assertEquals($key, $this->object->getMyKey());
    }

    /**
     * @covers \AbraFlexi\RO::ignore404
     */
    public function testIgnore404(): void
    {
        $this->object->ignore404(true);
        $this->assertTrue($this->object->ignore404());
    }

    /**
     * @covers \AbraFlexi\RO::sendByMail
     */
    public function testSendByMail(): void
    {
        $this->object->sendByMail(
            $this->object->reportRecipient,
            'test',
            'test body',
        );
    }

    /**
     * @covers \AbraFlexi\RO::getInFormat
     */
    public function testGetInFormat(): void
    {
        $this->expectException(\Ease\Exception::class);
        $this->expectExceptionMessage('Unknown language ua for PDF export');

        $this->object->evidence = 'test';
        $this->object->getInFormat('html', 'test');
        $this->object->getInFormat('pdf', 'test');
        $this->object->getInFormat('pdf', 'test', 'cs', true);
        $this->object->getInFormat('pdf', 'error', 'ua', false);
    }

    /**
     * @covers \AbraFlexi\RO::downloadInFormat
     */
    public function testDownloadInFormat(): void
    {
        $this->object->downloadInFormat('pdf', sys_get_temp_dir().'/');
    }

    /**
     * @covers \AbraFlexi\RO::getReportsInfo
     */
    public function testGetReportsInfo(): void
    {
        $result = $this->object->getReportsInfo();

        switch ($this->object->getEvidence()) {
            case '':
            case 'c':
            case 'hooks':
            case 'status':
            case 'changes':
            case 'evidence-list':
                break;

            default:
                $this->assertNotEmpty(
                    $result,
                    'Cannot obtain reports for '.$this->object->getEvidence(),
                );

                break;
        }
    }

    /**
     * @covers \AbraFlexi\RO::code
     */
    public function testCode(): void
    {
        $this->assertEquals('code:TEST', RO::code('test'));
    }

    /**
     * @covers \AbraFlexi\RO::uncode
     */
    public function testUncode(): void
    {
        $this->assertEquals('test', RO::uncode('code:test'));
    }

    /**
     * @covers \AbraFlexi\RO::arrayCleanUP
     */
    public function testArrayCleanUP(): void
    {
        $this->assertEquals(
            ['a' => 'b'],
            RO::arrayCleanUP(['a' => 'b', '@a' => 'aaa']),
        );
    }

    /**
     * @covers \AbraFlexi\RO::__destruct
     */
    public function testDestruct(): void
    {
        $this->assertEmpty($this->object->__destruct());
    }

    private function withEvidenceOnly(): void
    {
        if (empty($this->object->getEvidence())) {
            $this->markTestSkipped('Evidence is not set');
        }
    }
}
